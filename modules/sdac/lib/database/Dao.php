<?php
/* --------------------------------------------------------------- */
/**
 * FILE NAME   :Dao.php
 * AUTHOR      : Michelle Hong
 * SYNOPSIS    :
 * DESCRIPTION : Lms Data Abstract Object Definition
 * SEE ALSO    :
 * VERSION     : 1.0 ($Revision: 42 $)
 * CREATED     : 2012-12-10
 * LASTUPDATES : $Author: michellehong $ on $Date: 2013-07-30 09:56:46 +0800 (週二, 30 七月 2013) $
 * UPDATES     :
 * NOTES       :
 */
/* ---------------------------------------------------------------
   @(#) Dao.php              1.0 2012-12-10
   by Michelle Hong


   Copyright by ASTRI, Ltd., (ECE Group)
   All rights reserved.

   This software is the confidential and proprietary information
   of ASTRI, Ltd. ("Confidential Information").  You shall not
   disclose such Confidential Information and shall use it only
   in accordance with the terms of the license agreement you
   entered into with ASTRI.
   --------------------------------------------------------------- */


/* ===============================================================
   Begin of Dao.php
   =============================================================== */

namespace Clms\Tools\PhpDao;

use Clms\Tools\PhpDao\Exception\DbException;

use Clms\Tools\PhpDao\Driver\Driver;
/* ---------------------------------------------------------------
   Included Library
   --------------------------------------------------------------- */

//require_once(dirname(__FILE__). LMSDS.'Column.php');
//include(dirname(__DIR__). LMSDS. 'util' . LMSDS . 'String.php');

/* ---------------------------------------------------------------
   Global Variables
   --------------------------------------------------------------- */


/* ---------------------------------------------------------------
   Constant definition
   --------------------------------------------------------------- */


/* ---------------------------------------------------------------
   Function definition
   --------------------------------------------------------------- */

/* ---------------------------------------------------------------
   Class definition
   --------------------------------------------------------------- */

/**
 *
 * Lms Data object access abstract definition
 *
 * The class provides the data access to database cross different platform.
 * All the data saved to database should have an corresponding Dao class.
 *
 * Naming convention:
 * <pre>
 * Class Sample
 *          |
 *          |_ extends Class "SampleDao" => mapping to a table "#__sample"
 *                             |              (underscore format of class name)
 *                             |_ extends "Dao"
 *
 * A property "$x" in "SampleDao" => a column "x" in Table "#__sample"
 * </pre>
 *
 * All the <b>class</b> whose name starts with "Dao" should extend the class
 * Dao which implement the basic save, update, load, delete on the database.
 * All Dao inherited classes should generated by DaoGenerator through XML
 * file automatically.
 *
 * In order to easy the mapping from property name and column name without
 * any conversion, all the class property name defined in the inherited class
 * should follow <b>lower case without underscore</b> format and set as public.
 * Also, column specification in the <var>_columnSpec</var> should provided.
 *
 * A sample of Dao class is shown as below
 *
 *
 * If you have extra property which should be used or nested object, please
 * define in your main class which extends ***Dao (i.g. Class Sample).
 *
 * @todo add a sample
 * @package Php-Dao
 * @version 1.0
 * @since  Version 1.0
 * @author      Michelle Hong
 * @see DaoGenerator, Column
 * @testing
 * @warnings No nesting object is supported yet.
 * @updates
*/
abstract class Dao
{

    /**
     *
     * @var string Table name
     * @version 1.0
     * @since Version 1.0
     */
    protected $_tbl;

    /**
     *
     * @var Driver A database driver instance
     * @version 1.0
     * @since Version 1.0
     */
    protected $_db;

    /**
     *
     * @var array Column specifications
     * @version 1.0
     * @see Column
     * @since Version 1.0
     *
     */
    protected $_columnSpec= array();

    /**
     * @var string Primary key of the table. The primary key for Dao must be
     *             matched to a column name. Please note compound primary key is
     *             not supported (please use unique index instead).
     * @version 1.0
     * @since Version 1.0
    */
    protected $_tblPK;


    /**
     *
     * Lms Dao class constructor
     *
     * Other classes which extends the Dao passed the object name as table.
     * The table name is replaced by add a underscore before each of the upper
     * case string.
     *
     * By default, a prefix '#__' (later is replaced by the dbprefix in config)
     * append the lower conversion string described above
     *
     * Therefore an object named TestObject is replaced to
     * lms_test_object as the table name if the dbprefix is "lms_".
     *
     * @version 1.0
     * @param string $objectName Object name
     * @param Driver $db Database instance
     * @since  Version 1.0
     * @see String::underscore
     * @throws \Clms\Tools\PhpDao\Exception\DbExpception
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    protected function __construct($objectName, $db = null)
    {

        $this->_tbl = '#__' . String::underscore($objectName);

        if ($db === null) {
            $db = Driver::getInstance();
        }

        $this->_db = $db;

        $this->setColumnSpec();
    }

    /**
     *
     * Set the column specification
     *
     * The class which extends LmsDAO must implement this function
     * @version 1.0
     * @since Version 1.0
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    abstract protected function setColumnSpec();

    /**
     *
     * Get the index constraint of the table
     *
     * The class which extends Dao should implement this function. The
     * function is auto-generated by the DaoGenerator.
     *
     * A sample of generated code:
     *
     * <code>
     *  public function getColumnIndex()
     *  {
     *      $index= array();
     *      $index[]= new Index('idx_testint', 'intcolumn');
     *      $index[]= new Index(
     *          'two',
     *          array('boolcolumn', 'timestampcolumn'),
     *          true
     *      );
     *      return $index;
     *  }
     * </code>
     *
     * Please note that if you change your table during some updates,
     * the database index is not updated. Please update your XML and regenerate
     * the Dao*** class call Driver directly in order to add/drop index.
     *
     * @version 1.0
     * @since Version 1.0
     * @see Index
     * @author      Michelle Hong
     * @testing
     * @warnings Used when create table only
     * @updates
     */
    public function getColumnIndex()
    {
        return array();
    }
    /**
     *
     * Get the unique constraint information.

     * The class which extends Dao should implement this function if any
     * unique key defined in the table. The method is automatically generated
     * and do not modified the function yourself. A sample of generated code:
     *
     * <code>
     * public function getTableUnique()
     * {
     *      $unique= array();
     *       $unique[]= new Unique('uni_testint', 'intcolumn');
     *       $unique[]= new Unique(
     *           'two',
     *           array('boolcolumn', 'timestampcolumn'),
     *           true
     *       );
     *       return $unique;
     * }
     *
     * </code>
     *
     * Please note that, if you change your table unique index during some
     * updates, the database index is not changed automatically. Please udpate
     * your XML and regenerate the Dao*** class and callDriver directly
     * in order to add/drop unique constraint
     *
     * @version 1.0
     * @since Version 1.0
     * @return array An array of Unique
     * @see Unique
     * @author      Michelle Hong
     * @testing
     * @warnings Used when create table only.
     * @updates
     */
    public function getTableUnique()
    {
        return array();
    }

    /**
     *
     * Save or update an row to database
     *
     * If the primary key is given, then update, otherwise insert
     * @since  Version 1.0
     * @param string $updateNulls  whether the null field in the object
     *                             is updated
     * @return mixed a PDOStatement or false
     * @throws Clms\Tools\PhpDao\Exception\DbException
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public function save($updateNulls = false)
    {

        $tablePrimayKey= $this->_tblPK;

        if (!empty($tablePrimayKey) && empty($this->$tablePrimayKey)) {
            $this->$tablePrimayKey=null;
        }
        if (isset($this->$tablePrimayKey)) {
           //if there is lastmodified field,
           //set the value of last modified
           if(isset($this->_columnSpec['lastmodified'])){
               $this->lastmodified=time();
           }

           return $this->_db->updateObject(
               $this->_tbl,
               $this,
               $tablePrimayKey,
               $this->_columnSpec,
               $updateNulls
           );
        } else {
            if(isset($this->_columnSpec['lastmodified'])){
                $this->lastmodified=time();
            }
            if(isset($this->_columnSpec['timecreated'])){
                $this->timecreated=time();
            }
            return $this->_db->insertObject(
                $this->_tbl,
                $this,
                $tablePrimayKey,
                $this->_columnSpec
            );
        }

    }

    /**
     *
     * Remove rows from database by primary key
     *
     * The function uses the primary key of the object as the key
     * for removed if null is given
     * @param string $pkValue the value of the primary key
     * @return boolean|resource
     * @throws Clms\Tools\PhpDao\Exception\DbException
     * @since  Version 1.0
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public function delete($pkValue=null)
    {
        $key = $this->_tblPK;
        $pkValue = (is_null($pkValue)) ? $this->$key : $pkValue;

        // If no primary key is given, return false.
        if (empty($pkValue)) {
            return false;
        }

        return self::deleteList(array($key=>$pkValue));
    }

    /**
     *
     * Delete objects based on the criteria
     *
     * @version 1.0
     * @since  Version 1.0
     * @param array $keys delete criteria key value pair
     * @return boolean
     * @throws Clms\Tools\PhpDao\Exception\DbException
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public static function deleteList($keys)
    {
       if (!is_array($keys)) {
           return false;
       }


       $className=get_called_class();
       $dummyObject =new $className();
       //$db = Driver::getInstance($options);

       $query = $dummyObject->_db->getQuery(true);
       $query->delete()->from($dummyObject->getTableName());

       $validFields= array_keys($dummyObject->getColumnSpec());

       foreach ($keys as $key => $value) {
           if (!in_array($key, $validFields)) {
               //we ingnore the value not in definition
               continue;
           }

           $query->where($dummyObject->_db->quoteName($key) . ' =:' . $key);
           $type= $dummyObject->_columnSpec[$key]->getBindParamType();
           $query->bind(':'.$key, $keys[$key], $type, strlen($value));
       }

       $dummyObject->_db->setQuery($query);
       //Check for a database error.
       return $dummyObject->_db->execute();
    }


    /**
     *
     * Search objects based on the given criteria
     *
     * @version 1.0
     * @since  Version 1.0
     * @param array $keys a search criteria key value pair
     * @param int $offset Search offset
     * @param int $limit Search limit
     * @param array $orderBy Search order by. Should be a array of key value
     *                       pair. for example, title=>ASC, time=>DESC.
     * @param array $relation Used by there is condition search with greater, less than
     * @param array $groupBy Used for search group by
     * @param array $aggregates Aggregate selection, this only works when $groupBy is
     *                           not empty
     * @see
     * @throws Clms\Tools\PhpDao\Exception\DbException
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public static function search($keys =array(), $offset= 0, $limit=0,
            $orderBy= array(), $relation=array(), $groupBy=array(), $aggregates=array())
    {
        $className=get_called_class();
        $dummyObject =new $className();


        return $dummyObject->_db->loadObjectList(
            $dummyObject->getTableName(),
            $dummyObject->getColumnSpec(),
            $keys,
            $className,
            $offset,
            $limit,
            $orderBy,
            $relation,
            $groupBy,
            $aggregates
        );

    }


    /**
     *
     * Count a search result
     *
     * @version 1.0
     * @since  Version 1.0
     * @param array $keys a search criteria key value pair
     * @return integer The search result count
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public static function count($keys=array()){
        $className=get_called_class();
        $dummyObject =new $className();

        return $dummyObject->_db->countResult(
            $dummyObject->getTableName(),
            $dummyObject->getColumnSpec(),
            $keys);

    }





    /**
     *
     * Load a row to object from database
     *
     * The search criteria is passed through the $keys pair.
     *
     * Primary key can be omit in the keys and the primary key value defined in
     * the object is used for search if the $keys is null.
     *
     * <code>
     *    $sample->load( array('field'=> 'value'));
     * </code>
     * @since  Version 1.0
     * @param mixed $keys An array of the key value pair or an object
     *                   (we use this object  as the primary key value
     *                    for searching)
     * @param bool $forceStd if force to use stdClass to load the object
     *                       used by those class has a constructor with
     *                       parameters (not recommend)
     * @return boolean true if load success, otherwise fail
     * @throws Clms\Tools\PhpDao\Exception\DbException
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public function load($keys =null, $forceStd= false)
    {

        //If the keys is empty, then use the primary key by default.
        if (empty($keys)) {
            $tableKey = $this->_tblPK;
            $keyValue = isset($this->$tableKey)? $this->$tableKey: null;
            //if there is no keys and no primary key, search fails
            if (empty($keyValue)) {
                /**
                 * @todo add some error message
                 */
                return false;
            }
            $keys = array($tableKey => $keyValue);
        } elseif (!is_array($keys)) {
            // Load by primary key if the $keys is not an array.
            // We assume that this $keys is the value of the primary key
            $keys = array($this->_tblPK => $keys);
        }
        // Initialize the query.
        $query = $this->_db->getQuery(true);

        $query->select('*')->from($this->getTableName());

        $validFields= array_keys($this->getColumnSpec());

        foreach ($keys as $key => $value) {
            if (!in_array($key, $validFields)) {
                //we ingnore the value not in definition
                continue;
            }
            $query->where($this->_db->quoteName($key) . ' =:' . $key);
            $type= $this->_columnSpec[$key]->getBindParamType();
            $query->bind(':'.$key, $keys[$key], $type, strlen($value));
        }

        $this->_db->setQuery($query);

        if ($forceStd) {
            $row = $this->_db->loadObject();

        } else {
            $row = $this->_db->loadObject(get_class($this));
        }

        // Check that we have a result.
        if (empty($row)) {
            /**
             * @todo add some error message
             */
            return false;
        }

        foreach ($row as $key => $value) {
            $this-> $key= $value;
        }
        return true;
    }

    /**
     *
     * Get the table name in the database
     * @return string Table name
     * @since  Version 1.0
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public function getTableName()
    {
        return $this->_tbl;
    }
    /**
     *
     * Get the primary key of the table
     *
     * @version 1.0
     * @since  Version 1.0
     * @return string Primary key of the table
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public function getPrimarykey()
    {
        return $this->_tblPK;
    }

    /**
     *
     * Get the database column spec information
     * @return array
     * @since  Version 1.0
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public function getColumnSpec()
    {
        return $this->_columnSpec;
    }

   /**
    *
    * Print the public field of the object
    *
    * For debugging purpose only
    *
    * @version 1.0
    * @since  Version 1.0
    * @see
    * @author      Michelle Hong
    * @testing
    * @warnings
    * @updates
    */
    public function printObject()
    {
        $result= $this->getData();

        var_dump($result);
    }

    /**
     *
     * Get the data defined in the table column spec
     *
     * @version 1.0
     * @since  Version 1.0
     * @return \StdClass
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public function getData()
    {
       $data= new \StdClass;
       foreach($this->_columnSpec as $key => $value){
           $data->$key= isset($this->$key)? $this->$key: null;
       }
       return $data;
    }

    /**
     *
     * Set the value of the object
     *
     * @version 1.0
     * @since  Version 1.0
     * @param Object $object
     * @see
     * @author      Michelle Hong
     * @testing
     * @warnings
     * @updates
     */
    public function setData($object)
    {
        if (empty($object)) {
            return;
        }
        foreach ($this->_columnSpec as $key => $value) {
            if (isset($object->$key)) {
                $this->$key = $object->$key;
            }
        }

    }
}


/* ---------------------------------------------------------------
   Interface definition
  --------------------------------------------------------------- */

/* ===============================================================
   End of Dao.php
   =============================================================== */